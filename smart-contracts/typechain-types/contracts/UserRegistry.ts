/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace UserRegistry {
  export type JobStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    budget: BigNumberish;
    deadline: BigNumberish;
    client: AddressLike;
    isOpen: boolean;
  };

  export type JobStructOutput = [
    id: bigint,
    title: string,
    description: string,
    budget: bigint,
    deadline: bigint,
    client: string,
    isOpen: boolean
  ] & {
    id: bigint;
    title: string;
    description: string;
    budget: bigint;
    deadline: bigint;
    client: string;
    isOpen: boolean;
  };
}

export interface UserRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allUsers"
      | "clients"
      | "getAllClients"
      | "getAllServiceProviders"
      | "getJob"
      | "getTotalUsers"
      | "getUserSkills"
      | "jobCount"
      | "jobs"
      | "postJob"
      | "registerUser"
      | "registeredUsers"
      | "serviceProviders"
      | "updateProfile"
      | "userProfiles"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "JobPosted" | "ProfileUpdated" | "UserRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllClients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllServiceProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSkills",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "postJob",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, string, BigNumberish[], string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceProviders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string, string, BigNumberish[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userProfiles",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllClients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllServiceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSkills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProfiles",
    data: BytesLike
  ): Result;
}

export namespace JobPostedEvent {
  export type InputTuple = [jobId: BigNumberish, client: AddressLike];
  export type OutputTuple = [jobId: bigint, client: string];
  export interface OutputObject {
    jobId: bigint;
    client: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [userAddress: AddressLike, userType: BigNumberish];
  export type OutputTuple = [userAddress: string, userType: bigint];
  export interface OutputObject {
    userAddress: string;
    userType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): UserRegistry;
  waitForDeployment(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allUsers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  clients: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllClients: TypedContractMethod<[], [string[]], "view">;

  getAllServiceProviders: TypedContractMethod<[], [string[]], "view">;

  getJob: TypedContractMethod<
    [_jobId: BigNumberish],
    [UserRegistry.JobStructOutput],
    "view"
  >;

  getTotalUsers: TypedContractMethod<[], [bigint], "view">;

  getUserSkills: TypedContractMethod<
    [_userAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  jobCount: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        deadline: bigint;
        client: string;
        isOpen: boolean;
      }
    ],
    "view"
  >;

  postJob: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<
    [
      _name: string,
      _email: string,
      _skillCategories: BigNumberish[],
      _location: string,
      _workType: BigNumberish,
      _userType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registeredUsers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  serviceProviders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  updateProfile: TypedContractMethod<
    [
      _name: string,
      _email: string,
      _skillCategories: BigNumberish[],
      _location: string,
      _workType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userProfiles: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint] & {
        name: string;
        email: string;
        location: string;
        workType: bigint;
        userType: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allUsers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "clients"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllClients"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllServiceProviders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [_jobId: BigNumberish],
    [UserRegistry.JobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserSkills"
  ): TypedContractMethod<[_userAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "jobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, string, boolean] & {
        id: bigint;
        title: string;
        description: string;
        budget: bigint;
        deadline: bigint;
        client: string;
        isOpen: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "postJob"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [
      _name: string,
      _email: string,
      _skillCategories: BigNumberish[],
      _location: string,
      _workType: BigNumberish,
      _userType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredUsers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "serviceProviders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [
      _name: string,
      _email: string,
      _skillCategories: BigNumberish[],
      _location: string,
      _workType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userProfiles"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint] & {
        name: string;
        email: string;
        location: string;
        workType: bigint;
        userType: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "JobPosted"
  ): TypedContractEvent<
    JobPostedEvent.InputTuple,
    JobPostedEvent.OutputTuple,
    JobPostedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;

  filters: {
    "JobPosted(uint256,address)": TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
    JobPosted: TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;

    "ProfileUpdated(address)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,uint8)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
  };
}
