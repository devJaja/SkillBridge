/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace JobEscrow {
  export type JobStruct = {
    id: BigNumberish;
    client: AddressLike;
    provider: AddressLike;
    amount: BigNumberish;
    deadline: BigNumberish;
    completedAt: BigNumberish;
    status: BigNumberish;
  };

  export type JobStructOutput = [
    id: bigint,
    client: string,
    provider: string,
    amount: bigint,
    deadline: bigint,
    completedAt: bigint,
    status: bigint
  ] & {
    id: bigint;
    client: string;
    provider: string;
    amount: bigint;
    deadline: bigint;
    completedAt: bigint;
    status: bigint;
  };

  export type JobFeedbackStruct = {
    hasClientFeedback: boolean;
    clientApproved: boolean;
    clientComment: string;
    clientRating: BigNumberish;
    hasProviderFeedback: boolean;
    providerComment: string;
    feedbackTimestamp: BigNumberish;
  };

  export type JobFeedbackStructOutput = [
    hasClientFeedback: boolean,
    clientApproved: boolean,
    clientComment: string,
    clientRating: bigint,
    hasProviderFeedback: boolean,
    providerComment: string,
    feedbackTimestamp: bigint
  ] & {
    hasClientFeedback: boolean;
    clientApproved: boolean;
    clientComment: string;
    clientRating: bigint;
    hasProviderFeedback: boolean;
    providerComment: string;
    feedbackTimestamp: bigint;
  };
}

export interface JobEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLIENT_RESPONSE_GRACE_PERIOD"
      | "addProviderResponse"
      | "approveWork"
      | "assignProvider"
      | "autoRefundMissedDeadline"
      | "autoReleaseAfterGracePeriod"
      | "canAutoRefund"
      | "canAutoRelease"
      | "cancelJob"
      | "emergencyWithdraw"
      | "fundJob"
      | "getJob"
      | "getJobFeedback"
      | "getTimeUntilAutoRelease"
      | "getTimeUntilDeadline"
      | "getUserAverageRating"
      | "getUserRatingCount"
      | "jobCounter"
      | "jobFeedbacks"
      | "jobs"
      | "markCompleted"
      | "rejectWork"
      | "startJob"
      | "userRatingCounts"
      | "userRatings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyWithdraw"
      | "JobApproved"
      | "JobAutoRefunded"
      | "JobAutoReleased"
      | "JobCancelled"
      | "JobCompleted"
      | "JobFunded"
      | "JobRejected"
      | "JobStarted"
      | "ProviderAssigned"
      | "ProviderFeedbackAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLIENT_RESPONSE_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProviderResponse",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWork",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assignProvider",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoRefundMissedDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoReleaseAfterGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAutoRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canAutoRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobFeedback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilAutoRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilDeadline",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAverageRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRatingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jobCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jobFeedbacks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "markCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWork",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRatingCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userRatings",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLIENT_RESPONSE_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProviderResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoRefundMissedDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoReleaseAfterGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAutoRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canAutoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJobFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilAutoRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAverageRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRatingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jobFeedbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rejectWork", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRatingCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRatings",
    data: BytesLike
  ): Result;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [jobId: BigNumberish, refundAmount: BigNumberish];
  export type OutputTuple = [jobId: bigint, refundAmount: bigint];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobApprovedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    amountReleased: BigNumberish,
    rating: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    amountReleased: bigint,
    rating: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    amountReleased: bigint;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAutoRefundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    refundAmount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    refundAmount: bigint,
    reason: string
  ];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAutoReleasedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    amountReleased: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    amountReleased: bigint,
    reason: string
  ];
  export interface OutputObject {
    jobId: bigint;
    amountReleased: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish, refundAmount: BigNumberish];
  export type OutputTuple = [jobId: bigint, refundAmount: bigint];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCompletedEvent {
  export type InputTuple = [jobId: BigNumberish, completedAt: BigNumberish];
  export type OutputTuple = [jobId: bigint, completedAt: bigint];
  export interface OutputObject {
    jobId: bigint;
    completedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobFundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    client: string,
    amount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    client: string;
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobRejectedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    reason: string,
    rating: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, reason: string, rating: bigint];
  export interface OutputObject {
    jobId: bigint;
    reason: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobStartedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderAssignedEvent {
  export type InputTuple = [jobId: BigNumberish, provider: AddressLike];
  export type OutputTuple = [jobId: bigint, provider: string];
  export interface OutputObject {
    jobId: bigint;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderFeedbackAddedEvent {
  export type InputTuple = [jobId: BigNumberish, comment: string];
  export type OutputTuple = [jobId: bigint, comment: string];
  export interface OutputObject {
    jobId: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JobEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): JobEscrow;
  waitForDeployment(): Promise<this>;

  interface: JobEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLIENT_RESPONSE_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addProviderResponse: TypedContractMethod<
    [_jobId: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;

  approveWork: TypedContractMethod<
    [_jobId: BigNumberish, _rating: BigNumberish, _comment: string],
    [void],
    "nonpayable"
  >;

  assignProvider: TypedContractMethod<
    [_jobId: BigNumberish, _provider: AddressLike],
    [void],
    "nonpayable"
  >;

  autoRefundMissedDeadline: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  autoReleaseAfterGracePeriod: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  canAutoRefund: TypedContractMethod<[_jobId: BigNumberish], [boolean], "view">;

  canAutoRelease: TypedContractMethod<
    [_jobId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelJob: TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundJob: TypedContractMethod<[_deadline: BigNumberish], [void], "payable">;

  getJob: TypedContractMethod<
    [_jobId: BigNumberish],
    [JobEscrow.JobStructOutput],
    "view"
  >;

  getJobFeedback: TypedContractMethod<
    [_jobId: BigNumberish],
    [JobEscrow.JobFeedbackStructOutput],
    "view"
  >;

  getTimeUntilAutoRelease: TypedContractMethod<
    [_jobId: BigNumberish],
    [bigint],
    "view"
  >;

  getTimeUntilDeadline: TypedContractMethod<
    [_jobId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserAverageRating: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserRatingCount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  jobCounter: TypedContractMethod<[], [bigint], "view">;

  jobFeedbacks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean, string, bigint] & {
        hasClientFeedback: boolean;
        clientApproved: boolean;
        clientComment: string;
        clientRating: bigint;
        hasProviderFeedback: boolean;
        providerComment: string;
        feedbackTimestamp: bigint;
      }
    ],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        client: string;
        provider: string;
        amount: bigint;
        deadline: bigint;
        completedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  markCompleted: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  rejectWork: TypedContractMethod<
    [_jobId: BigNumberish, _rating: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  startJob: TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;

  userRatingCounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userRatings: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLIENT_RESPONSE_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addProviderResponse"
  ): TypedContractMethod<
    [_jobId: BigNumberish, _response: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveWork"
  ): TypedContractMethod<
    [_jobId: BigNumberish, _rating: BigNumberish, _comment: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assignProvider"
  ): TypedContractMethod<
    [_jobId: BigNumberish, _provider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "autoRefundMissedDeadline"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "autoReleaseAfterGracePeriod"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canAutoRefund"
  ): TypedContractMethod<[_jobId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "canAutoRelease"
  ): TypedContractMethod<[_jobId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelJob"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundJob"
  ): TypedContractMethod<[_deadline: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [_jobId: BigNumberish],
    [JobEscrow.JobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobFeedback"
  ): TypedContractMethod<
    [_jobId: BigNumberish],
    [JobEscrow.JobFeedbackStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeUntilAutoRelease"
  ): TypedContractMethod<[_jobId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimeUntilDeadline"
  ): TypedContractMethod<[_jobId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAverageRating"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRatingCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobFeedbacks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean, string, bigint] & {
        hasClientFeedback: boolean;
        clientApproved: boolean;
        clientComment: string;
        clientRating: bigint;
        hasProviderFeedback: boolean;
        providerComment: string;
        feedbackTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        client: string;
        provider: string;
        amount: bigint;
        deadline: bigint;
        completedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "markCompleted"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rejectWork"
  ): TypedContractMethod<
    [_jobId: BigNumberish, _rating: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startJob"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userRatingCounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userRatings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "JobApproved"
  ): TypedContractEvent<
    JobApprovedEvent.InputTuple,
    JobApprovedEvent.OutputTuple,
    JobApprovedEvent.OutputObject
  >;
  getEvent(
    key: "JobAutoRefunded"
  ): TypedContractEvent<
    JobAutoRefundedEvent.InputTuple,
    JobAutoRefundedEvent.OutputTuple,
    JobAutoRefundedEvent.OutputObject
  >;
  getEvent(
    key: "JobAutoReleased"
  ): TypedContractEvent<
    JobAutoReleasedEvent.InputTuple,
    JobAutoReleasedEvent.OutputTuple,
    JobAutoReleasedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobCompleted"
  ): TypedContractEvent<
    JobCompletedEvent.InputTuple,
    JobCompletedEvent.OutputTuple,
    JobCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JobFunded"
  ): TypedContractEvent<
    JobFundedEvent.InputTuple,
    JobFundedEvent.OutputTuple,
    JobFundedEvent.OutputObject
  >;
  getEvent(
    key: "JobRejected"
  ): TypedContractEvent<
    JobRejectedEvent.InputTuple,
    JobRejectedEvent.OutputTuple,
    JobRejectedEvent.OutputObject
  >;
  getEvent(
    key: "JobStarted"
  ): TypedContractEvent<
    JobStartedEvent.InputTuple,
    JobStartedEvent.OutputTuple,
    JobStartedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderAssigned"
  ): TypedContractEvent<
    ProviderAssignedEvent.InputTuple,
    ProviderAssignedEvent.OutputTuple,
    ProviderAssignedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderFeedbackAdded"
  ): TypedContractEvent<
    ProviderFeedbackAddedEvent.InputTuple,
    ProviderFeedbackAddedEvent.OutputTuple,
    ProviderFeedbackAddedEvent.OutputObject
  >;

  filters: {
    "EmergencyWithdraw(uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "JobApproved(uint256,uint256,uint256)": TypedContractEvent<
      JobApprovedEvent.InputTuple,
      JobApprovedEvent.OutputTuple,
      JobApprovedEvent.OutputObject
    >;
    JobApproved: TypedContractEvent<
      JobApprovedEvent.InputTuple,
      JobApprovedEvent.OutputTuple,
      JobApprovedEvent.OutputObject
    >;

    "JobAutoRefunded(uint256,uint256,string)": TypedContractEvent<
      JobAutoRefundedEvent.InputTuple,
      JobAutoRefundedEvent.OutputTuple,
      JobAutoRefundedEvent.OutputObject
    >;
    JobAutoRefunded: TypedContractEvent<
      JobAutoRefundedEvent.InputTuple,
      JobAutoRefundedEvent.OutputTuple,
      JobAutoRefundedEvent.OutputObject
    >;

    "JobAutoReleased(uint256,uint256,string)": TypedContractEvent<
      JobAutoReleasedEvent.InputTuple,
      JobAutoReleasedEvent.OutputTuple,
      JobAutoReleasedEvent.OutputObject
    >;
    JobAutoReleased: TypedContractEvent<
      JobAutoReleasedEvent.InputTuple,
      JobAutoReleasedEvent.OutputTuple,
      JobAutoReleasedEvent.OutputObject
    >;

    "JobCancelled(uint256,uint256)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobCompleted(uint256,uint256)": TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;
    JobCompleted: TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;

    "JobFunded(uint256,address,uint256,uint256)": TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;
    JobFunded: TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;

    "JobRejected(uint256,string,uint256)": TypedContractEvent<
      JobRejectedEvent.InputTuple,
      JobRejectedEvent.OutputTuple,
      JobRejectedEvent.OutputObject
    >;
    JobRejected: TypedContractEvent<
      JobRejectedEvent.InputTuple,
      JobRejectedEvent.OutputTuple,
      JobRejectedEvent.OutputObject
    >;

    "JobStarted(uint256)": TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;
    JobStarted: TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;

    "ProviderAssigned(uint256,address)": TypedContractEvent<
      ProviderAssignedEvent.InputTuple,
      ProviderAssignedEvent.OutputTuple,
      ProviderAssignedEvent.OutputObject
    >;
    ProviderAssigned: TypedContractEvent<
      ProviderAssignedEvent.InputTuple,
      ProviderAssignedEvent.OutputTuple,
      ProviderAssignedEvent.OutputObject
    >;

    "ProviderFeedbackAdded(uint256,string)": TypedContractEvent<
      ProviderFeedbackAddedEvent.InputTuple,
      ProviderFeedbackAddedEvent.OutputTuple,
      ProviderFeedbackAddedEvent.OutputObject
    >;
    ProviderFeedbackAdded: TypedContractEvent<
      ProviderFeedbackAddedEvent.InputTuple,
      ProviderFeedbackAddedEvent.OutputTuple,
      ProviderFeedbackAddedEvent.OutputObject
    >;
  };
}
