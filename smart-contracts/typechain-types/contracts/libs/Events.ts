/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyWithdraw"
      | "JobApplication"
      | "JobApproved"
      | "JobAutoRefunded"
      | "JobAutoReleased"
      | "JobCancelled"
      | "JobCompleted"
      | "JobFunded"
      | "JobListingClosed"
      | "JobListingPosted"
      | "JobRejected"
      | "JobStarted"
      | "ProfileUpdated"
      | "ProviderAssigned"
      | "ProviderFeedbackAdded"
  ): EventFragment;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [jobId: BigNumberish, refundAmount: BigNumberish];
  export type OutputTuple = [jobId: bigint, refundAmount: bigint];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobApplicationEvent {
  export type InputTuple = [applicant: AddressLike, listingId: BigNumberish];
  export type OutputTuple = [applicant: string, listingId: bigint];
  export interface OutputObject {
    applicant: string;
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobApprovedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    amountReleased: BigNumberish,
    rating: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    amountReleased: bigint,
    rating: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    amountReleased: bigint;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAutoRefundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    refundAmount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    refundAmount: bigint,
    reason: string
  ];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAutoReleasedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    amountReleased: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    amountReleased: bigint,
    reason: string
  ];
  export interface OutputObject {
    jobId: bigint;
    amountReleased: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish, refundAmount: BigNumberish];
  export type OutputTuple = [jobId: bigint, refundAmount: bigint];
  export interface OutputObject {
    jobId: bigint;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCompletedEvent {
  export type InputTuple = [jobId: BigNumberish, completedAt: BigNumberish];
  export type OutputTuple = [jobId: bigint, completedAt: bigint];
  export interface OutputObject {
    jobId: bigint;
    completedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobFundedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    listingId: BigNumberish,
    client: AddressLike,
    amount: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    listingId: bigint,
    client: string,
    amount: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    listingId: bigint;
    client: string;
    amount: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobListingClosedEvent {
  export type InputTuple = [listingId: BigNumberish];
  export type OutputTuple = [listingId: bigint];
  export interface OutputObject {
    listingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobListingPostedEvent {
  export type InputTuple = [listingId: BigNumberish, client: AddressLike];
  export type OutputTuple = [listingId: bigint, client: string];
  export interface OutputObject {
    listingId: bigint;
    client: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobRejectedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    reason: string,
    rating: BigNumberish
  ];
  export type OutputTuple = [jobId: bigint, reason: string, rating: bigint];
  export interface OutputObject {
    jobId: bigint;
    reason: string;
    rating: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobStartedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderAssignedEvent {
  export type InputTuple = [jobId: BigNumberish, provider: AddressLike];
  export type OutputTuple = [jobId: bigint, provider: string];
  export interface OutputObject {
    jobId: bigint;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderFeedbackAddedEvent {
  export type InputTuple = [jobId: BigNumberish, comment: string];
  export type OutputTuple = [jobId: bigint, comment: string];
  export interface OutputObject {
    jobId: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "JobApplication"
  ): TypedContractEvent<
    JobApplicationEvent.InputTuple,
    JobApplicationEvent.OutputTuple,
    JobApplicationEvent.OutputObject
  >;
  getEvent(
    key: "JobApproved"
  ): TypedContractEvent<
    JobApprovedEvent.InputTuple,
    JobApprovedEvent.OutputTuple,
    JobApprovedEvent.OutputObject
  >;
  getEvent(
    key: "JobAutoRefunded"
  ): TypedContractEvent<
    JobAutoRefundedEvent.InputTuple,
    JobAutoRefundedEvent.OutputTuple,
    JobAutoRefundedEvent.OutputObject
  >;
  getEvent(
    key: "JobAutoReleased"
  ): TypedContractEvent<
    JobAutoReleasedEvent.InputTuple,
    JobAutoReleasedEvent.OutputTuple,
    JobAutoReleasedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobCompleted"
  ): TypedContractEvent<
    JobCompletedEvent.InputTuple,
    JobCompletedEvent.OutputTuple,
    JobCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JobFunded"
  ): TypedContractEvent<
    JobFundedEvent.InputTuple,
    JobFundedEvent.OutputTuple,
    JobFundedEvent.OutputObject
  >;
  getEvent(
    key: "JobListingClosed"
  ): TypedContractEvent<
    JobListingClosedEvent.InputTuple,
    JobListingClosedEvent.OutputTuple,
    JobListingClosedEvent.OutputObject
  >;
  getEvent(
    key: "JobListingPosted"
  ): TypedContractEvent<
    JobListingPostedEvent.InputTuple,
    JobListingPostedEvent.OutputTuple,
    JobListingPostedEvent.OutputObject
  >;
  getEvent(
    key: "JobRejected"
  ): TypedContractEvent<
    JobRejectedEvent.InputTuple,
    JobRejectedEvent.OutputTuple,
    JobRejectedEvent.OutputObject
  >;
  getEvent(
    key: "JobStarted"
  ): TypedContractEvent<
    JobStartedEvent.InputTuple,
    JobStartedEvent.OutputTuple,
    JobStartedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderAssigned"
  ): TypedContractEvent<
    ProviderAssignedEvent.InputTuple,
    ProviderAssignedEvent.OutputTuple,
    ProviderAssignedEvent.OutputObject
  >;
  getEvent(
    key: "ProviderFeedbackAdded"
  ): TypedContractEvent<
    ProviderFeedbackAddedEvent.InputTuple,
    ProviderFeedbackAddedEvent.OutputTuple,
    ProviderFeedbackAddedEvent.OutputObject
  >;

  filters: {
    "EmergencyWithdraw(uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "JobApplication(address,uint256)": TypedContractEvent<
      JobApplicationEvent.InputTuple,
      JobApplicationEvent.OutputTuple,
      JobApplicationEvent.OutputObject
    >;
    JobApplication: TypedContractEvent<
      JobApplicationEvent.InputTuple,
      JobApplicationEvent.OutputTuple,
      JobApplicationEvent.OutputObject
    >;

    "JobApproved(uint256,uint256,uint256)": TypedContractEvent<
      JobApprovedEvent.InputTuple,
      JobApprovedEvent.OutputTuple,
      JobApprovedEvent.OutputObject
    >;
    JobApproved: TypedContractEvent<
      JobApprovedEvent.InputTuple,
      JobApprovedEvent.OutputTuple,
      JobApprovedEvent.OutputObject
    >;

    "JobAutoRefunded(uint256,uint256,string)": TypedContractEvent<
      JobAutoRefundedEvent.InputTuple,
      JobAutoRefundedEvent.OutputTuple,
      JobAutoRefundedEvent.OutputObject
    >;
    JobAutoRefunded: TypedContractEvent<
      JobAutoRefundedEvent.InputTuple,
      JobAutoRefundedEvent.OutputTuple,
      JobAutoRefundedEvent.OutputObject
    >;

    "JobAutoReleased(uint256,uint256,string)": TypedContractEvent<
      JobAutoReleasedEvent.InputTuple,
      JobAutoReleasedEvent.OutputTuple,
      JobAutoReleasedEvent.OutputObject
    >;
    JobAutoReleased: TypedContractEvent<
      JobAutoReleasedEvent.InputTuple,
      JobAutoReleasedEvent.OutputTuple,
      JobAutoReleasedEvent.OutputObject
    >;

    "JobCancelled(uint256,uint256)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobCompleted(uint256,uint256)": TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;
    JobCompleted: TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;

    "JobFunded(uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;
    JobFunded: TypedContractEvent<
      JobFundedEvent.InputTuple,
      JobFundedEvent.OutputTuple,
      JobFundedEvent.OutputObject
    >;

    "JobListingClosed(uint256)": TypedContractEvent<
      JobListingClosedEvent.InputTuple,
      JobListingClosedEvent.OutputTuple,
      JobListingClosedEvent.OutputObject
    >;
    JobListingClosed: TypedContractEvent<
      JobListingClosedEvent.InputTuple,
      JobListingClosedEvent.OutputTuple,
      JobListingClosedEvent.OutputObject
    >;

    "JobListingPosted(uint256,address)": TypedContractEvent<
      JobListingPostedEvent.InputTuple,
      JobListingPostedEvent.OutputTuple,
      JobListingPostedEvent.OutputObject
    >;
    JobListingPosted: TypedContractEvent<
      JobListingPostedEvent.InputTuple,
      JobListingPostedEvent.OutputTuple,
      JobListingPostedEvent.OutputObject
    >;

    "JobRejected(uint256,string,uint256)": TypedContractEvent<
      JobRejectedEvent.InputTuple,
      JobRejectedEvent.OutputTuple,
      JobRejectedEvent.OutputObject
    >;
    JobRejected: TypedContractEvent<
      JobRejectedEvent.InputTuple,
      JobRejectedEvent.OutputTuple,
      JobRejectedEvent.OutputObject
    >;

    "JobStarted(uint256)": TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;
    JobStarted: TypedContractEvent<
      JobStartedEvent.InputTuple,
      JobStartedEvent.OutputTuple,
      JobStartedEvent.OutputObject
    >;

    "ProfileUpdated(address)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "ProviderAssigned(uint256,address)": TypedContractEvent<
      ProviderAssignedEvent.InputTuple,
      ProviderAssignedEvent.OutputTuple,
      ProviderAssignedEvent.OutputObject
    >;
    ProviderAssigned: TypedContractEvent<
      ProviderAssignedEvent.InputTuple,
      ProviderAssignedEvent.OutputTuple,
      ProviderAssignedEvent.OutputObject
    >;

    "ProviderFeedbackAdded(uint256,string)": TypedContractEvent<
      ProviderFeedbackAddedEvent.InputTuple,
      ProviderFeedbackAddedEvent.OutputTuple,
      ProviderFeedbackAddedEvent.OutputObject
    >;
    ProviderFeedbackAdded: TypedContractEvent<
      ProviderFeedbackAddedEvent.InputTuple,
      ProviderFeedbackAddedEvent.OutputTuple,
      ProviderFeedbackAddedEvent.OutputObject
    >;
  };
}
